# Python stubs generated by omniidl from RenderFarm.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "RenderFarm"
#
__name__ = "RenderFarm"
_0_RenderFarm = omniORB.openModule("RenderFarm", r"RenderFarm.idl")
_0_RenderFarm__POA = omniORB.openModule("RenderFarm__POA", r"RenderFarm.idl")


# enum eClientStates
_0_RenderFarm.TC_UNINITIALISED = omniORB.EnumItem("TC_UNINITIALISED", 0)
_0_RenderFarm.TC_INITIALISED = omniORB.EnumItem("TC_INITIALISED", 1)
_0_RenderFarm.TC_WAITING = omniORB.EnumItem("TC_WAITING", 2)
_0_RenderFarm.TC_PREPARED = omniORB.EnumItem("TC_PREPARED", 3)
_0_RenderFarm.TC_RENDER_IN_PROGRESS = omniORB.EnumItem("TC_RENDER_IN_PROGRESS", 4)
_0_RenderFarm.TC_FRAME_FORWARDING = omniORB.EnumItem("TC_FRAME_FORWARDING", 5)
_0_RenderFarm.TC_COMPLETE = omniORB.EnumItem("TC_COMPLETE", 6)
_0_RenderFarm.eClientStates = omniORB.Enum("IDL:RenderFarm/eClientStates:1.0", (_0_RenderFarm.TC_UNINITIALISED, _0_RenderFarm.TC_INITIALISED, _0_RenderFarm.TC_WAITING, _0_RenderFarm.TC_PREPARED, _0_RenderFarm.TC_RENDER_IN_PROGRESS, _0_RenderFarm.TC_FRAME_FORWARDING, _0_RenderFarm.TC_COMPLETE,))

_0_RenderFarm._d_eClientStates  = (omniORB.tcInternal.tv_enum, _0_RenderFarm.eClientStates._NP_RepositoryId, "eClientStates", _0_RenderFarm.eClientStates._items)
_0_RenderFarm._tc_eClientStates = omniORB.tcInternal.createTypeCode(_0_RenderFarm._d_eClientStates)
omniORB.registerType(_0_RenderFarm.eClientStates._NP_RepositoryId, _0_RenderFarm._d_eClientStates, _0_RenderFarm._tc_eClientStates)

# enum eFrameStates
_0_RenderFarm.FRAME_CLIENT_IDLE = omniORB.EnumItem("FRAME_CLIENT_IDLE", 0)
_0_RenderFarm.FRAME_WAITING = omniORB.EnumItem("FRAME_WAITING", 1)
_0_RenderFarm.FRAME_DOWNLOADING = omniORB.EnumItem("FRAME_DOWNLOADING", 2)
_0_RenderFarm.FRAME_RENDERING = omniORB.EnumItem("FRAME_RENDERING", 3)
_0_RenderFarm.FRAME_FORWARDING = omniORB.EnumItem("FRAME_FORWARDING", 4)
_0_RenderFarm.FRAME_COLLECTED = omniORB.EnumItem("FRAME_COLLECTED", 5)
_0_RenderFarm.FRAME_SCENE_COMPLETE = omniORB.EnumItem("FRAME_SCENE_COMPLETE", 6)
_0_RenderFarm.eFrameStates = omniORB.Enum("IDL:RenderFarm/eFrameStates:1.0", (_0_RenderFarm.FRAME_CLIENT_IDLE, _0_RenderFarm.FRAME_WAITING, _0_RenderFarm.FRAME_DOWNLOADING, _0_RenderFarm.FRAME_RENDERING, _0_RenderFarm.FRAME_FORWARDING, _0_RenderFarm.FRAME_COLLECTED, _0_RenderFarm.FRAME_SCENE_COMPLETE,))

_0_RenderFarm._d_eFrameStates  = (omniORB.tcInternal.tv_enum, _0_RenderFarm.eFrameStates._NP_RepositoryId, "eFrameStates", _0_RenderFarm.eFrameStates._items)
_0_RenderFarm._tc_eFrameStates = omniORB.tcInternal.createTypeCode(_0_RenderFarm._d_eFrameStates)
omniORB.registerType(_0_RenderFarm.eFrameStates._NP_RepositoryId, _0_RenderFarm._d_eFrameStates, _0_RenderFarm._tc_eFrameStates)
_0_RenderFarm.RENDERTASK_COMPLETE = -1
_0_RenderFarm.RENDERJOB_COMPLETE = -2

# typedef ... tChunk
class tChunk:
    _NP_RepositoryId = "IDL:RenderFarm/tChunk:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RenderFarm.tChunk = tChunk
_0_RenderFarm._d_tChunk  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0)
_0_RenderFarm._ad_tChunk = (omniORB.tcInternal.tv_alias, tChunk._NP_RepositoryId, "tChunk", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_RenderFarm._tc_tChunk = omniORB.tcInternal.createTypeCode(_0_RenderFarm._ad_tChunk)
omniORB.registerType(tChunk._NP_RepositoryId, _0_RenderFarm._ad_tChunk, _0_RenderFarm._tc_tChunk)
del tChunk

# interface iRenderServer
_0_RenderFarm._d_iRenderServer = (omniORB.tcInternal.tv_objref, "IDL:RenderFarm/iRenderServer:1.0", "iRenderServer")
omniORB.typeMapping["IDL:RenderFarm/iRenderServer:1.0"] = _0_RenderFarm._d_iRenderServer
_0_RenderFarm.iRenderServer = omniORB.newEmptyClass()
class iRenderServer :
    _NP_RepositoryId = _0_RenderFarm._d_iRenderServer[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RenderFarm.iRenderServer = iRenderServer
_0_RenderFarm._tc_iRenderServer = omniORB.tcInternal.createTypeCode(_0_RenderFarm._d_iRenderServer)
omniORB.registerType(iRenderServer._NP_RepositoryId, _0_RenderFarm._d_iRenderServer, _0_RenderFarm._tc_iRenderServer)

# iRenderServer operations and attributes
iRenderServer._d_GetHostName = ((), ((omniORB.tcInternal.tv_string,0), ), None)
iRenderServer._d_GetHostIPaddress = ((), ((omniORB.tcInternal.tv_string,0), ), None)
iRenderServer._d_GetFTPServerPort = ((), (omniORB.tcInternal.tv_short, ), None)
iRenderServer._d_IsInTestMode = ((), (omniORB.tcInternal.tv_boolean, ), None)
iRenderServer._d_AddFrameServer = (((omniORB.tcInternal.tv_string,0), ), (), None)
iRenderServer._d_GetNameOfAssociatedFrameServer = ((), ((omniORB.tcInternal.tv_string,0), ), None)
iRenderServer._d_SetFrameAsComplete = ((omniORB.tcInternal.tv_short, ), (), None)
iRenderServer._d_AddJobMonitor = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
iRenderServer._d_GetJobDetails = ((omniORB.tcInternal.tv_short, ), (omniORB.tcInternal.tv_boolean, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_short, omniORB.tcInternal.tv_short), None)
iRenderServer._d_GetFrameToRender = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0)), None)
iRenderServer._d_GetNextState = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:RenderFarm/eClientStates:1.0"]), (omniORB.typeMapping["IDL:RenderFarm/eClientStates:1.0"], ), None)

# iRenderServer object reference
class _objref_iRenderServer (CORBA.Object):
    _NP_RepositoryId = iRenderServer._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def GetHostName(self, *args):
        return _omnipy.invoke(self, "GetHostName", _0_RenderFarm.iRenderServer._d_GetHostName, args)

    def GetHostIPaddress(self, *args):
        return _omnipy.invoke(self, "GetHostIPaddress", _0_RenderFarm.iRenderServer._d_GetHostIPaddress, args)

    def GetFTPServerPort(self, *args):
        return _omnipy.invoke(self, "GetFTPServerPort", _0_RenderFarm.iRenderServer._d_GetFTPServerPort, args)

    def IsInTestMode(self, *args):
        return _omnipy.invoke(self, "IsInTestMode", _0_RenderFarm.iRenderServer._d_IsInTestMode, args)

    def AddFrameServer(self, *args):
        return _omnipy.invoke(self, "AddFrameServer", _0_RenderFarm.iRenderServer._d_AddFrameServer, args)

    def GetNameOfAssociatedFrameServer(self, *args):
        return _omnipy.invoke(self, "GetNameOfAssociatedFrameServer", _0_RenderFarm.iRenderServer._d_GetNameOfAssociatedFrameServer, args)

    def SetFrameAsComplete(self, *args):
        return _omnipy.invoke(self, "SetFrameAsComplete", _0_RenderFarm.iRenderServer._d_SetFrameAsComplete, args)

    def AddJobMonitor(self, *args):
        return _omnipy.invoke(self, "AddJobMonitor", _0_RenderFarm.iRenderServer._d_AddJobMonitor, args)

    def GetJobDetails(self, *args):
        return _omnipy.invoke(self, "GetJobDetails", _0_RenderFarm.iRenderServer._d_GetJobDetails, args)

    def GetFrameToRender(self, *args):
        return _omnipy.invoke(self, "GetFrameToRender", _0_RenderFarm.iRenderServer._d_GetFrameToRender, args)

    def GetNextState(self, *args):
        return _omnipy.invoke(self, "GetNextState", _0_RenderFarm.iRenderServer._d_GetNextState, args)

    __methods__ = ["GetHostName", "GetHostIPaddress", "GetFTPServerPort", "IsInTestMode", "AddFrameServer", "GetNameOfAssociatedFrameServer", "SetFrameAsComplete", "AddJobMonitor", "GetJobDetails", "GetFrameToRender", "GetNextState"] + CORBA.Object.__methods__

omniORB.registerObjref(iRenderServer._NP_RepositoryId, _objref_iRenderServer)
_0_RenderFarm._objref_iRenderServer = _objref_iRenderServer
del iRenderServer, _objref_iRenderServer

# iRenderServer skeleton
__name__ = "RenderFarm__POA"
class iRenderServer (PortableServer.Servant):
    _NP_RepositoryId = _0_RenderFarm.iRenderServer._NP_RepositoryId


    _omni_op_d = {"GetHostName": _0_RenderFarm.iRenderServer._d_GetHostName, "GetHostIPaddress": _0_RenderFarm.iRenderServer._d_GetHostIPaddress, "GetFTPServerPort": _0_RenderFarm.iRenderServer._d_GetFTPServerPort, "IsInTestMode": _0_RenderFarm.iRenderServer._d_IsInTestMode, "AddFrameServer": _0_RenderFarm.iRenderServer._d_AddFrameServer, "GetNameOfAssociatedFrameServer": _0_RenderFarm.iRenderServer._d_GetNameOfAssociatedFrameServer, "SetFrameAsComplete": _0_RenderFarm.iRenderServer._d_SetFrameAsComplete, "AddJobMonitor": _0_RenderFarm.iRenderServer._d_AddJobMonitor, "GetJobDetails": _0_RenderFarm.iRenderServer._d_GetJobDetails, "GetFrameToRender": _0_RenderFarm.iRenderServer._d_GetFrameToRender, "GetNextState": _0_RenderFarm.iRenderServer._d_GetNextState}

iRenderServer._omni_skeleton = iRenderServer
_0_RenderFarm__POA.iRenderServer = iRenderServer
omniORB.registerSkeleton(iRenderServer._NP_RepositoryId, iRenderServer)
del iRenderServer
__name__ = "RenderFarm"

# interface iFrameServer
_0_RenderFarm._d_iFrameServer = (omniORB.tcInternal.tv_objref, "IDL:RenderFarm/iFrameServer:1.0", "iFrameServer")
omniORB.typeMapping["IDL:RenderFarm/iFrameServer:1.0"] = _0_RenderFarm._d_iFrameServer
_0_RenderFarm.iFrameServer = omniORB.newEmptyClass()
class iFrameServer :
    _NP_RepositoryId = _0_RenderFarm._d_iFrameServer[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RenderFarm.iFrameServer = iFrameServer
_0_RenderFarm._tc_iFrameServer = omniORB.tcInternal.createTypeCode(_0_RenderFarm._d_iFrameServer)
omniORB.registerType(iFrameServer._NP_RepositoryId, _0_RenderFarm._d_iFrameServer, _0_RenderFarm._tc_iFrameServer)

# iFrameServer operations and attributes
iFrameServer._d_GetName = ((), ((omniORB.tcInternal.tv_string,0), ), None)
iFrameServer._d_GetHostName = ((), ((omniORB.tcInternal.tv_string,0), ), None)
iFrameServer._d_AddJobMonitor = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
iFrameServer._d_CreateFrameHandle = ((omniORB.tcInternal.tv_short, omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_boolean, ), None)
iFrameServer._d_AppendFrameChunk = ((omniORB.tcInternal.tv_short, omniORB.tcInternal.tv_short, omniORB.tcInternal.tv_short, omniORB.typeMapping["IDL:RenderFarm/tChunk:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
iFrameServer._d_IsFrameTransferOk = ((omniORB.tcInternal.tv_short, omniORB.tcInternal.tv_short), (omniORB.tcInternal.tv_boolean, ), None)

# iFrameServer object reference
class _objref_iFrameServer (CORBA.Object):
    _NP_RepositoryId = iFrameServer._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def GetName(self, *args):
        return _omnipy.invoke(self, "GetName", _0_RenderFarm.iFrameServer._d_GetName, args)

    def GetHostName(self, *args):
        return _omnipy.invoke(self, "GetHostName", _0_RenderFarm.iFrameServer._d_GetHostName, args)

    def AddJobMonitor(self, *args):
        return _omnipy.invoke(self, "AddJobMonitor", _0_RenderFarm.iFrameServer._d_AddJobMonitor, args)

    def CreateFrameHandle(self, *args):
        return _omnipy.invoke(self, "CreateFrameHandle", _0_RenderFarm.iFrameServer._d_CreateFrameHandle, args)

    def AppendFrameChunk(self, *args):
        return _omnipy.invoke(self, "AppendFrameChunk", _0_RenderFarm.iFrameServer._d_AppendFrameChunk, args)

    def IsFrameTransferOk(self, *args):
        return _omnipy.invoke(self, "IsFrameTransferOk", _0_RenderFarm.iFrameServer._d_IsFrameTransferOk, args)

    __methods__ = ["GetName", "GetHostName", "AddJobMonitor", "CreateFrameHandle", "AppendFrameChunk", "IsFrameTransferOk"] + CORBA.Object.__methods__

omniORB.registerObjref(iFrameServer._NP_RepositoryId, _objref_iFrameServer)
_0_RenderFarm._objref_iFrameServer = _objref_iFrameServer
del iFrameServer, _objref_iFrameServer

# iFrameServer skeleton
__name__ = "RenderFarm__POA"
class iFrameServer (PortableServer.Servant):
    _NP_RepositoryId = _0_RenderFarm.iFrameServer._NP_RepositoryId


    _omni_op_d = {"GetName": _0_RenderFarm.iFrameServer._d_GetName, "GetHostName": _0_RenderFarm.iFrameServer._d_GetHostName, "AddJobMonitor": _0_RenderFarm.iFrameServer._d_AddJobMonitor, "CreateFrameHandle": _0_RenderFarm.iFrameServer._d_CreateFrameHandle, "AppendFrameChunk": _0_RenderFarm.iFrameServer._d_AppendFrameChunk, "IsFrameTransferOk": _0_RenderFarm.iFrameServer._d_IsFrameTransferOk}

iFrameServer._omni_skeleton = iFrameServer
_0_RenderFarm__POA.iFrameServer = iFrameServer
omniORB.registerSkeleton(iFrameServer._NP_RepositoryId, iFrameServer)
del iFrameServer
__name__ = "RenderFarm"

# interface iJobMonitor
_0_RenderFarm._d_iJobMonitor = (omniORB.tcInternal.tv_objref, "IDL:RenderFarm/iJobMonitor:1.0", "iJobMonitor")
omniORB.typeMapping["IDL:RenderFarm/iJobMonitor:1.0"] = _0_RenderFarm._d_iJobMonitor
_0_RenderFarm.iJobMonitor = omniORB.newEmptyClass()
class iJobMonitor :
    _NP_RepositoryId = _0_RenderFarm._d_iJobMonitor[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RenderFarm.iJobMonitor = iJobMonitor
_0_RenderFarm._tc_iJobMonitor = omniORB.tcInternal.createTypeCode(_0_RenderFarm._d_iJobMonitor)
omniORB.registerType(iJobMonitor._NP_RepositoryId, _0_RenderFarm._d_iJobMonitor, _0_RenderFarm._tc_iJobMonitor)

# iJobMonitor operations and attributes
iJobMonitor._d_UpdateStatus = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_short, omniORB.typeMapping["IDL:RenderFarm/eFrameStates:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)

# iJobMonitor object reference
class _objref_iJobMonitor (CORBA.Object):
    _NP_RepositoryId = iJobMonitor._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def UpdateStatus(self, *args):
        return _omnipy.invoke(self, "UpdateStatus", _0_RenderFarm.iJobMonitor._d_UpdateStatus, args)

    __methods__ = ["UpdateStatus"] + CORBA.Object.__methods__

omniORB.registerObjref(iJobMonitor._NP_RepositoryId, _objref_iJobMonitor)
_0_RenderFarm._objref_iJobMonitor = _objref_iJobMonitor
del iJobMonitor, _objref_iJobMonitor

# iJobMonitor skeleton
__name__ = "RenderFarm__POA"
class iJobMonitor (PortableServer.Servant):
    _NP_RepositoryId = _0_RenderFarm.iJobMonitor._NP_RepositoryId


    _omni_op_d = {"UpdateStatus": _0_RenderFarm.iJobMonitor._d_UpdateStatus}

iJobMonitor._omni_skeleton = iJobMonitor
_0_RenderFarm__POA.iJobMonitor = iJobMonitor
omniORB.registerSkeleton(iJobMonitor._NP_RepositoryId, iJobMonitor)
del iJobMonitor
__name__ = "RenderFarm"

# interface iRenderClient
_0_RenderFarm._d_iRenderClient = (omniORB.tcInternal.tv_objref, "IDL:RenderFarm/iRenderClient:1.0", "iRenderClient")
omniORB.typeMapping["IDL:RenderFarm/iRenderClient:1.0"] = _0_RenderFarm._d_iRenderClient
_0_RenderFarm.iRenderClient = omniORB.newEmptyClass()
class iRenderClient :
    _NP_RepositoryId = _0_RenderFarm._d_iRenderClient[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RenderFarm.iRenderClient = iRenderClient
_0_RenderFarm._tc_iRenderClient = omniORB.tcInternal.createTypeCode(_0_RenderFarm._d_iRenderClient)
omniORB.registerType(iRenderClient._NP_RepositoryId, _0_RenderFarm._d_iRenderClient, _0_RenderFarm._tc_iRenderClient)

# iRenderClient operations and attributes
iRenderClient._d_GetName = ((), ((omniORB.tcInternal.tv_string,0), ), None)
iRenderClient._d_GetHostName = ((), ((omniORB.tcInternal.tv_string,0), ), None)

# iRenderClient object reference
class _objref_iRenderClient (CORBA.Object):
    _NP_RepositoryId = iRenderClient._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def GetName(self, *args):
        return _omnipy.invoke(self, "GetName", _0_RenderFarm.iRenderClient._d_GetName, args)

    def GetHostName(self, *args):
        return _omnipy.invoke(self, "GetHostName", _0_RenderFarm.iRenderClient._d_GetHostName, args)

    __methods__ = ["GetName", "GetHostName"] + CORBA.Object.__methods__

omniORB.registerObjref(iRenderClient._NP_RepositoryId, _objref_iRenderClient)
_0_RenderFarm._objref_iRenderClient = _objref_iRenderClient
del iRenderClient, _objref_iRenderClient

# iRenderClient skeleton
__name__ = "RenderFarm__POA"
class iRenderClient (PortableServer.Servant):
    _NP_RepositoryId = _0_RenderFarm.iRenderClient._NP_RepositoryId


    _omni_op_d = {"GetName": _0_RenderFarm.iRenderClient._d_GetName, "GetHostName": _0_RenderFarm.iRenderClient._d_GetHostName}

iRenderClient._omni_skeleton = iRenderClient
_0_RenderFarm__POA.iRenderClient = iRenderClient
omniORB.registerSkeleton(iRenderClient._NP_RepositoryId, iRenderClient)
del iRenderClient
__name__ = "RenderFarm"

#
# End of module "RenderFarm"
#
__name__ = "RenderFarm_idl"

_exported_modules = ( "RenderFarm", )

# The end.
